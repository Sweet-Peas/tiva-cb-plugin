////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: Tiva Launchpad ARM
// Author:  Alexander Kaltsas
// Changes by: Pontus Oldberg
//
// Description:
//          Currently the script has been converted to support building with
//          a makefile but will eventually support building in the IDE as well.
//
////////////////////////////////////////////////////////////////////////////////

// Global Vars
Processor <- _T("");     // The chosen processor
ARMBin <- false;         // produce Bin file from AXF output ?
ARMLss <- false;         // produce extended list file from ELF output?
ARMSize <- false;        // Run avr-size after the build

function BeginWizard()
{
    local wiz_type = Wizard.GetWizardType();

    if (wiz_type == wizProject)
    {
        local intro_msg = _T("Welcome to the Tiva Project Wizard\n\n" +
                             "This wizard will guide you to create a new Tiva project.\n\n" +
                             "When you 're ready to proceed, please click \"Next\"\n\n" +
                             "This wizard is created by Alexander Kaltsas.\n" +
                             "Updated for the Tiva libraries by Pontus Oldberg.\n" +
                             "For suggestions and bug reports, please send to\n<pontus.oldberg@gmail.com>");

        Wizard.AddInfoPage(_T("TivaIntro"), intro_msg);
        Wizard.AddProjectPathPage();
        Wizard.AddCompilerPage(_T("GNU ARM GCC Compiler"), _T("arm*"), false, true);
        Wizard.AddPage(_T("processorChoice"));
    }
    else
        print(wiz_type);
}


function OnLeave_processorChoice(fwd)
{
    if (fwd)
    {
        Processor = Wizard.GetComboboxStringSelection(_T("comboboxProc"));
        ARMBin = Wizard.IsCheckboxChecked(_T("checkboxBin"));
        ARMLss = Wizard.IsCheckboxChecked(_T("checkboxLss"));
        ARMSize = Wizard.IsCheckboxChecked(_T("checkboxARMSize"));
    }
    return true;
}


////////////////////////////////////////////////////////////////////////////////
// Processor choice page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_programmerChoice(fwd)
{
    if (fwd)
    {
        Programmer = Wizard.GetComboboxStringSelection(_T("comboboxProg"));
        Debugger = Wizard.GetComboboxStringSelection(_T("comboboxDbgr"));
        DebuggerCon = Wizard.GetComboboxStringSelection(_T("comboboxDbgrCon"));
    }
    return true;
}


function GetFilesDir()
{
    local result = _T("Tiva/files");
    return result;
}

// setup the already created project
function SetupProject(project)
{

    project.SetVar(_T("Tiva_DIR"), _T("${HOME}/ti/TivaWare"), false);

    // Post Build steps
    local pb_armsize = ::wxString();
    local pb_bin = ::wxString();
    local pb_lss = ::wxString();


    // Post build commands

    pb_bin = _T("arm-none-eabi-objcopy -O binary $(TARGET_OUTPUT_FILE) $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).bin");
    pb_lss = _T("arm-none-eabi-objcopy -h -S $(TARGET_OUTPUT_FILE) > $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).lss");
    pb_armsize = _T("arm-none-eabi-objcopy $(TARGET_OUTPUT_FILE)");

    // Project compiler options
    // WarningsOn(project, Wizard.GetCompilerID());
    // project.AddCompilerOption(_T("-DPART_") + Processor);

    // project.AddCompilerOption(_T("-mcpu=cortex-m4"));
    // project.AddCompilerOption(_T("-mfpu=fpv4-sp-d16"));
    // project.AddCompilerOption(_T("-mthumb"));
    // project.AddCompilerOption(_T("-mfloat-abi=softfp -ffunction-sections -fdata-sections -MD -std=c99 -Wall -pedantic -c -DTARGET_IS_BLIZZARD_RA2 -DUART_BUFFERED -Dgcc"));

    // project.AddIncludeDir(_T("$(Tiva_DIR)"));



    // project.AddLinkerOption(_T("-T linker.ld"));
    // project.AddLinkerOption(_T("--entry ResetISR --gc-sections"));
    // project.AddLinkerOption(_T("`arm-none-eabi-gcc -print-libgcc-file-name`"));
    // project.AddLinkerOption(_T("`arm-none-eabi-gcc -print-file-name=libc.a`"));
    // project.AddLinkerOption(_T("`arm-none-eabi-gcc -print-file-name=libm.a`"));
    // project.AddLinkerOption(_T("$(Tiva_DIR)/driverlib/gcc-cm4f/libdriver-cm4f.a"));

    project.AddToExtensions(_T("debugger/remote_debugging:target=Debug"));
    project.AddToExtensions(_T("debugger/remote_debugging/options:conn_type=0"));
    project.AddToExtensions(_T("debugger/remote_debugging/options:serial_baud=115200"));
    project.AddToExtensions(_T("debugger/remote_debugging/options:ip_address=localhost"));
    project.AddToExtensions(_T("debugger/remote_debugging/options:ip_port=3333"));
    project.AddToExtensions(_T("debugger/remote_debugging/options:additional_cmds=monitor reset halt"));

    // We are using a custom makefile
    project.SetMakefile(_T("Makefile));
    project.SetMakefileCustom(TRUE);

    if (ARMLss)
        project.AddCommandsAfterBuild(pb_lss);

    if (ARMBin)
    {
        project.AddCommandsAfterBuild(pb_bin);

    }

    // Debug build target
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttNative);
        target.SetTargetFilenameGenerationPolicy(tgfpPlatformDefault, tgfpNone);
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + _T(".axf"));
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release build target
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
        {
            target.SetTargetType(ttNative);
            target.SetTargetFilenameGenerationPolicy(tgfpPlatformDefault, tgfpNone);
            target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + _T(".axf"));
            OptimizationsOn(target, Wizard.GetCompilerID());
        }

    project.SetVar(_T("MCU"), Processor, false);

    return true;
}
